@startuml
' ER Diagram for Keyboard Trainer System (Updated for KeyFingerMappingScheme)
' Organizes entities by logical modules for clarity

package "Exercise Module" {
  entity "Exercise" {
    ' Represents a single exercise with key inputs and layout
    * slug : String <<unique>>
    --
    * layout : Ref<KeyboardLayout> <<FK>>
    * keys : KeyInput[] <<array>>
    * type : ExerciseType <<enum>>
    * hash : String <<unique>>
    --
    timestamps : Date
  }

  entity "ExerciseSet" {
    ' Groups exercises for a specific keyboard profile
    * name : String
    description : String
    * exercises : Ref<Exercise>[] <<FK, array>>
    * keyboardProfile : Ref<KeyboardProfile> <<FK>>
    * profileHash : String <<unique>>
    version : Number <<default: 0>>
    generated : Boolean <<default: true>>
    --
    timestamps : Date
  }

  entity "KeyInput" {
    ' Defines a key press with code and modifier
    * code : KeyCode
    modifier : ModifierKey ?
  }

  enum "ExerciseType" {
    Basic
    Combination
    Speed
    Custom
  }
}

package "Keyboard Module" {
  entity "KeyboardProfile" {
    ' Defines user-specific keyboard configuration
    * geometry : Ref<KeyboardGeometry> <<FK>>
    * layout : Ref<KeyboardLayout> <<FK>>
    * keyFingerMappingScheme : Ref<KeyFingerMappingScheme> <<FK>>
    * homeRow : HomeRow <<default: DEFAULT_HOME_ROW>>
    --
    timestamps : Date
  }

  entity "KeyboardGeometry" {
    ' Defines physical geometry of the keyboard
    * geometryId : String <<unique>>
    --
    * formFactor : FormFactor <<enum>>
    * format : KeyboardFormat <<enum>>
    isCustom : Boolean <<default: false>>
    --
    timestamps : Date
  }

  entity "KeyboardLayout" {
    ' Defines keyboard layout with key mappings
    * layoutId : KeyboardLayoutId <<enum, unique, index>>
    * layoutMap : Record<ModifierKey, Record<KeyCode, KeyDefinition>>
    isCustom : Boolean <<default: false>>
    --
    timestamps : Date
  }

  entity "KeyDefinition" {
    ' Defines key characteristics for a layout
    * char : String
    * type : KeyType <<enum>>
    alternates : KeyInput[] <<array>>
  }

  entity "KeyFingerMappingScheme" {
    ' Maps keys to fingers for typing
    * schemeId : KeyFingerMappingSchemeType <<enum>>
    * keyFingerMappingScheme : Object <<KeyFingerMapping>>
    * hash : String <<unique>>
    --
    timestamps : Date
  }

  entity "UserKeyFingerMapping" {
    ' Links user to a scheme with custom title
    * userId : Ref<User> <<FK>>
    * title : String
    description : String
    * schemeId : Ref<KeyFingerMappingScheme> <<FK>>
    --
    timestamps : Date
  }

  entity "HomeRow" {
    ' Defines home row configuration for typing
    * configuration : Object
  }

  enum "FormFactor" {
    Fullsize
    TKL
    SixtyPercent
    SeventyFivePercent
    FortyPercent
    FiftyPercent
    EightyPercent
  }

  enum "KeyboardFormat" {
    Iso
    Ansi
  }

  enum "KeyboardLayoutId" {
    UsQwerty
    Dvorak
    Colemak
    Workman
    Jcuken
  }

  enum "KeyType" {
    LETTER
    DIGIT
    SYMBOL
    SPECIAL
  }

  enum "KeyFingerMappingSchemeType" {
    Optimized
    Logical
    Custom
  }
}

package "User Module" {
  entity "User" {
    ' Represents a user with authentication and settings
    * github_id : Number <<unique>>
    * google_id : Number <<unique>>
    ? email : String <<unique, sparse>>
    ? emailVerified : Date
    ? imageURL : String
    role : Role <<enum, default: User>>
    settings : Settings
    ? lastLogin : Date
    ? firstName : String
    ? lastName : String
    ? dateOfBirth : Date
    ? gender : Gender <<enum>>
    ? username : String <<unique, sparse>>
    ? locale : String
    ? registrationCompleted : Date
    keyboardSettings : KeyboardSettings
    ? timeZone : String
    --
    timestamps : Date
  }

  entity "Settings" {
    ' User-specific settings
    theme : String
    notifications : Boolean
  }

  entity "KeyboardSettings" {
    ' User-specific keyboard settings
    system : System <<enum>>
    keyboardProfileIds : Ref<KeyboardProfile>[] <<FK, array>>
    ? activeKeyboardProfileId : Ref<KeyboardProfile> <<FK>>
  }

  entity "UserKeyboardProfile" {
    ' Links user to keyboard profile and exercise set
    * userId : Ref<User> <<FK>>
    * keyboardProfileId : Ref<KeyboardProfile> <<FK>>
    * currentExerciseSetId : Ref<ExerciseSet> <<FK>>
    --
    timestamps : Date
  }

  entity "Session" {
    ' Represents a user session, used in authentication
    * userId : Ref<User> <<FK>>
    * token : String
    * expires : Date
    --
    timestamps : Date
  }

  enum "System" {
    Macos
    Windows
    Linux
  }

  enum "Role" {
    User
    Admin
    Moderator
  }

  enum "Gender" {
    Male
    Female
  }
}

' Relationships
Exercise ||--o{ KeyInput : contains
Exercise ||--o{ KeyboardLayout : references
ExerciseSet ||--o{ Exercise : references
ExerciseSet ||--o{ KeyboardProfile : references
KeyboardProfile ||--o{ KeyboardGeometry : references
KeyboardProfile ||--o{ KeyboardLayout : references
KeyboardProfile ||--o{ KeyFingerMappingScheme : references
KeyboardProfile ||--o{ HomeRow : contains
KeyboardLayout ||--o{ KeyDefinition : contains
UserKeyFingerMapping ||--o{ User : created by
UserKeyFingerMapping ||--o{ KeyFingerMappingScheme : references
KeyDefinition ||--o{ KeyInput : contains
KeyFingerMappingScheme ||--o{ User : created by
User ||--o{ Settings : contains
User ||--o{ KeyboardSettings : contains
KeyboardSettings ||--o{ KeyboardProfile : references
UserKeyboardProfile ||--o{ User : references
UserKeyboardProfile ||--o{ KeyboardProfile : references
UserKeyboardProfile ||--o{ ExerciseSet : references
Session ||--o{ User : references

' Enum dependencies (as type references)
KeyboardGeometry::formFactor -- FormFactor
KeyboardGeometry::format -- KeyboardFormat

KeyboardLayout::layoutId -- KeyboardLayoutId

KeyDefinition::type -- KeyType

KeyFingerMappingScheme::schemeId -- KeyFingerMappingSchemeType

@enduml
